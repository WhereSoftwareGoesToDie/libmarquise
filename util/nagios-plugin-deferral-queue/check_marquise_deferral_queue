#!/usr/bin/env python

import os
import os.path

from nagioscheck import NagiosCheck, Status, PerformanceMetric

class MarquiseDeferralQueueCheck(NagiosCheck):
    """
    Checks amount and age of deferred data from libmarquise.

    """
    version = '0.1.1'

    def __init__(self):
        NagiosCheck.__init__(self)

        self.add_option('d', 'defer_dir', 'defer_dir',
            'Directory libmarquise uses for deferrals.')
        self.add_option('p', 'defer_prefix', 'defer_prefix',
            'Prefix of libmarquise deferral files.')

    def check(self, opts, args):
        defer_dir = getattr(opts, 'defer_dir') or "/var/tmp"
        defer_prefix = getattr(opts, 'defer_prefix') or "marquise_defer_file_"
        perfdata = []
        if not (os.path.isdir(defer_dir) and os.access(defer_dir, os.X_OK)):
            raise Status("unknown", "Unable to access deferral directory %s" % defer_dir)
        paths = os.listdir(defer_dir)
        paths = filter(lambda p: p.startswith(defer_prefix), paths)
        p = PerformanceMetric("deferral_files", len(paths), "")
        perfdata.append(p)
        paths = map(lambda p: os.path.join(defer_dir, p), paths)
        sizes = []
        for p in paths:
            try:
                sizes.append(os.path.getsize(p))
            except OSError:
                continue
        perfdata.append(PerformanceMetric("max_size", max(sizes), "b"))
        perfdata.append(PerformanceMetric("total_size", sum(sizes), "b"))
        raise Status('ok', "info only", perfdata)

if __name__ == '__main__':
    MarquiseDeferralQueueCheck().run()
